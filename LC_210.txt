 
# Course Schedule II . . . 

vector<int> topoSort(unordered_map<int,vector<int>>adj,int numCourses, vector<int>&inDegree){

    
        queue<int>q;
        vector<int>result;
        int count=0;
        for(int i=0;i<numCourses;i++){

        if(inDegree[i]==0){
            q.push(i);
            result.push_back(i);
            count++;
        }
        }
        
        while(!q.empty()){

        int u=q.front();
            q.pop();
            for(int &v: adj[u]){

            inDegree[v]--;
                if(inDegree[v]==0) {

                        q.push(v);
            result.push_back(v);
            count++;
                
                }
            }
        
        }
        
        if(count==numCourses) return result;
         
        return {};
        
    }
    
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        
        unordered_map<int,vector<int>>adj;
        vector<int>inDegree(numCourses,0);
        
        for(auto & vec:prerequisites){
            
            int a=vec[0];
            int b=vec[1];
            
            inDegree[a]++;
            adj[b].push_back(a);
            
            
        }
        
        return topoSort(adj,numCourses,inDegree);
    }