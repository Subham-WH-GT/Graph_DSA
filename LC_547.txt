# No. of Provinces

DFS . . . 

 int n;
    
    void DFS( unordered_map<int,vector<int>>adj, int u,vector<bool>&visited){
        
        visited[u]=true;
        
        for(int &v: adj[u]){
            
            if(!visited[v]){

            DFS(adj,v,visited);
            }
        }
        
    }
    
    int findCircleNum(vector<vector<int>>& isConnected) {
      
        int prov=0;
        n=isConnected.size();
        vector<bool>visited(n,false);
        unordered_map<int,vector<int>>adj;
        for(int i=0;i<n;i++){

        for(int j=0;j<n;j++){

        if(isConnected[i][j]==1){
            
            adj[i].push_back(j);
            adj[j].push_back(i);
        }
        }
        }
        
        for(int i=0;i<n;i++){
            
            if(!visited[i]){

            prov++;
                DFS(adj,i,visited);
                
            }
        
        
        }
        return prov;
        
    }



  * * BFS * *


    
    int n;
    
    void bfs(int u,  unordered_map<int,vector<int>>adj,  vector<bool>&visited){

    visited[u]=true;
        
        queue<int>q;
        q.push(u);
        while(!q.empty()){

        int curr=q.front();
            q.pop();
            
            for(int &v:adj[curr]){
                
                if(!visited[v]){

                bfs(v,adj,visited);
                }
                
            }
        }
    }
    

    
    int findCircleNum(vector<vector<int>>& isConnected) {
      
        n=isConnected.size();
        unordered_map<int,vector<int>>adj;
        
        vector<bool>visited(n,false);
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                        if(isConnected[i][j]==1){

        adj[i].push_back(j);
            adj[j].push_back(i);
        }
            }

        }
        int prov=0;
        
        for(int i=0;i<n;i++){

        if(!visited[i]){
            bfs(i,adj,visited);
            prov++;
        }
        }
        
        return prov;
    }