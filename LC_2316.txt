 # Count Unreachable Pairs of Nodes . . .


 vector<int>parent;
    vector<int>rank;
    
    void Union(int x, int y){
        
        int x_parent=find(x);
        int y_parent=find(y);
        
        if(x_parent==y_parent) return;
        
        else if(rank[x_parent]> rank[y_parent]){
            
            parent[y_parent]=x_parent;
            
        }
        
        else if(rank[x_parent]< rank[y_parent]){
            
            parent[x_parent]=y_parent;
            
        }
        
        else{

        parent[x_parent]=y_parent;
            rank[y_parent]++;
        }
        
    }
    
    int find(int x){

    if(parent[x]==x) return x;
        
        return parent[x]=find(parent[x]);
    }
    
    long long countPairs(int n, vector<vector<int>>& edges) {
        
        
        parent.resize(n);
        rank.resize(n,0);
        
        for(int i=0;i<n;i++){
            
            parent[i]=i;
        }
        
        for(auto & vec:edges){
            
            int x=vec[0];
            int y=vec[1];
            
            if(find(x) != find(y)){
                Union(x,y);
            }
        }
        
        unordered_map<int,int>m;
        for(int i=0;i<n;i++){
            m[find(i)]++;
        }
        
        long long ans=0;
        long long rn=n;
        
        for(auto &it:m){
            
            long long size=it.second;
            ans+=size * (rn-size);
            rn-=size;
        }
        
        return ans;
        
    }