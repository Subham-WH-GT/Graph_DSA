 vector<vector<int>>directions{{0,1},{0,-1},{1,0},{-1,0},{1,1},{-1,1},{-1,-1},{1,-1}};
    typedef pair<int,pair<int,int>>P;
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();

        if(m==0 || n==0 || grid[0][0] !=0) return -1;
       
       auto isSafe=[&](int x, int y){
           return x>=0 and x<m and y>=0 and y<n;
       };
        vector<vector<int>>result(m,vector<int>(n,INT_MAX));

        priority_queue<P,vector<P>,greater<P>>pq;
        result[0][0]=0;
        pq.push({0,{0,0}});
        while(!pq.empty()){
            int d=pq.top().first;
            int x=pq.top().second.first;
            int y=pq.top().second.second;
            pair<int,int> node=pq.top().second;
            pq.pop();

            for(auto dir: directions){
                int x_=x+dir[0];
                int y_=y+dir[1];

                int dist=1;
                if(isSafe(x_,y_) and grid[x_][y_]==0 and d+dist < result[x_][y_]){
                    result[x_][y_]=d+dist;
                    pq.push({d+dist,{x_,y_}});
                }
            }
        }

        if(result[m-1][n-1]==INT_MAX) return -1;

        return result[m-1][n-1]+1;
        
    }