    int dfs( unordered_map<int,vector<int>>&adj, int curr, int parent, vector<bool>& hasApple){

        int time=0;
        for(int &child: adj[curr]){
            if(child==parent) continue;

            int time_taken_by_child=dfs(adj,child,curr,hasApple);
            if(time_taken_by_child>0 || hasApple[child]){
                time+=time_taken_by_child+2;
            }
        }
        return time;

    }

    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        
        unordered_map<int,vector<int>>adj;
        for(auto& edge:edges){
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }

        return dfs(adj,0,-1,hasApple);
    }