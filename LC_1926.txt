   
#Nearest Exit from Entrance . . . 

 vector<vector<int>>directions{{0,1},{0,-1},{1,0},{-1,0}};
    
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        
        
        int m=maze.size();
        int n=maze[0].size();
        
        queue<pair<int,int>>q;
        q.push({entrance[0],entrance[1]});
        maze[entrance[0]][entrance[1]]='+';
        
        int steps=0;
        
        while(!q.empty()){
        int N=q.size();
       
            while(N--){
                auto temp=q.front();
            q.pop();
                int i=temp.first;
                int j=temp.second;
                
                if((temp!= make_pair(entrance[0],entrance[1])) and (i==0 || i==m-1 || j==0 || j==n-1)){
                    
                    return steps;
                }
                
                for(auto &dir: directions){

                int ni=i+dir[0];
                    int nj=j+dir[1];
                    
                    if(ni>=0 and ni<m and nj>=0 and nj<n and maze[ni][nj]!='+'){
                        maze[ni][nj]='+';
                        q.push(make_pair(ni,nj));
                        
                    }
                    
                    
                }
                
                
            
            }
            
           steps++; 
        }
        
        return -1;
    }